Vimderp
Making Vim a little less derpy
2 Apr 2015
Tags:

Daniel Hess
dhess@monsooncommerce.com
dan@danielhess.me
http://monsooncommerce.com
@dan9186


* Religious Wars
_"Learn_an_editor_that_suits_your_needs_really_well,_don't_take_any_s#!t_from_anyone_who_tells_you_it's_terrible,_and_always_be_open_to_new_tools."_
[[https://twitter.com/joepferguson][@joepferguson]]

* Vi vs Vim


* Vi
The visual mode of the line editor *ex*

- common place on most Unix systems
- relevant for when you shell into a box

* Vim
Stands for *Vi*IMproved*
Vim is considered to be a superset of Vi

- support for syntax highlighting, code folding
- multilevel undo/redo
- screen splitting
- edit files inside a compressed archive
- built in diff (vimdiff)
- support for plugins


* Modus Operandi

* Modes

_Normal_
- default or initial mode
- case sensative, but do similar actions
- not echoed to the screen
- do not require `ENTER` after a command

_Insert_
- add and edit all the text you want
- enter by using command mode actions
- not always needed to change text

_Visual_
- select lines or blocks of text

_Command_
- more complex line editing commands
- can issue shell commands

* Keep These in Mind
As you learn shortcuts, you will transfer more of the editing work to computer

When in doubt press ESC

The concept of the current mode is fundamental

Vim is not a WYSIWYG, consider LaTeX for that

* Two Different Keyboards

.image img/vim-normal-mode.png

* Follow The Patern

There are a few exceptions, but gennerally speaking all tasks follow the same pattern

Most commands you can preceed with a number to multiple the action


* Navigation

* Directing The Cursor
You can use the arrow keys, backspace, and enter, but they are out of the way

Left

	h

Down

	j

Up

	k

Right

	l

* Directing The Cursor (Cont)
Next word

	w

Previous word

	b

Hard beggining of the line

	0

Soft begginning of the line

	^

End of the line

	$

* Directing The Cursor (Cont)
Go to last line

	G

Go to first line

	gg

Go to the 5th line

	5G

Notice the exception to the capital rule


* Editing Text

* Entering Insert Mode

"insert" starts editing at the cursors current location

	i

"append" starts editing one space after the cursor

	a

"open" opens a new line and starts editing

	o

"change" changes a specified number of items (characters, words, whole line)

	c

* The capital versions
"insert" moves to the begging of the line
"append" moves to the end of the line
"open" a line above
"change" from the cursor to the end of the line

* Direction and Editing
Combined with directional commands, "change", "delete", and "yank" can make for much faster edits

To the end of a word

	cw

The next two words

	c2w

To the end of the line

	c$

* Deleting Text
_d_ is for "delete"

Current word

	dw

To end of line

	D

Current line

	dd

Twenty lines from the cursor down

	d20d

*Keep*in*mind* the most recent delete is also put to the copy buffer

* Copying Text
_y_ is for "yank"

Copies lines to the copy buffer

Current line

	yy

17 lines from the cursor down

	y17y

* Moving Text
_p_ is for "put"

Anything in the copy buffer to a line

After the cursor

	p

Before the cursor

	P

*Keep*in*mind* a healthy mix of delete and put will allow cutting

* Selecting
Also know as visual mode

Used to select subsets of text

	v

*Line*Mode*
Used to select multiple lines

	V


*Column*Mode*
Used to select multiline blocks not always consisting of the whole line

	ctrl+v

Combined with insert, append, delete, and put this makes a powerful multicontent editing method

* Searching

* The Next One
You must always be normal mode to use searching

The next occurrance

	n

The previous occurrance

	N

The first occurrance

	ggn

The last occurrance

	GN

* Basic Searching
Searching forward:

	/StringToMatch

Searching backward:

	?StringToMatch

Add a _\c_ to do a case insensitive searching

* Current Word
Match the word at the cursor

Searching forward:

	*

Searching backward:

	#



* HERE BE DRAGONS

* Chaining actions

Chaning navigation and action commands together can do some pretty impressive things very quickly

Reindent entire buffer

	gg=G

* Backspaces

.image img/its-a-trap.jpg

Depending on the type of terminal you are using, backspace may erase what you've previously typed or may just back up


* Commands

* Executing Commands

Executing Ex Commands

	:command

Send command back to the shell

	:!go test


* The Buffer

* Saving

Never editing a live file, always working on a temporary file loadded into a buffer

Changes do not affect the original file until saved

* Lines
A line is not necessarily the same length as the visible line on the screen


* Customizing

* Using With Golang
	go syntax hilighting
	godef go to definition
	syntastic/pathogen
	auto-complete
	tabs/tabedit


* Slides available on GitHub

.link http://slides.danielhess.me

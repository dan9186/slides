Gotchas In Go
Different hangups in go that catch most
06 Dec 2017
Tags:

Daniel Hess
Senior Software Engineer
Ion Channel

http://www.ionchannel.io
dan.hess@ionchannel.io

daniel@danielhess.me
@dan9186

* Who Am I?

- Developed microservices in the cloud
- Practitioner of agile software development
- Always learning more to share more

* Postfix Increments

* Postfix Increments
- increments are statements, not operators
.play code/postfix/postfix.go /^func main/,/^}/

* Defers

* Defers
- executed in last-in-first-out order
.play code/defers/stacking.go /^func main/,/^}/
- are not executed if the main routine exits before they are run
.play code/defers/exit.go /^func main/,/^}/

* Scope

* Scope
- don't over use the `:=` operator
.play code/scope/excessive-assignment.go /^func main/,/^}/

* Scope
- inline assignment and checking can impact your scope unexpectedly
- only has scope inside the if statement
.play code/scope/inline.go /^func main/,/^}/

* Pointers

* Pointers
- ranging over pointers, things often appear normal
.play code/pointers/range-norm.go /^func main/,/^}/

* Pointers
- even with a slice of pointers
.play code/pointers/range-sop.go /^func main/,/^}/

* Pointers
- value var of `range` passes by value
- the pointer of the value object will point at the location of the range variable
.play code/pointers/range-why.go /^func main/,/^}/
- usually goes unnoticed

* Pointers
- usually we do a little more appending building up data
.play code/pointers/sop-broken.go /^func main/,/^}/
- a slice of the same address is made

* Pointers
- leverage the index returned by range instead
.play code/pointers/sop-fix.go /^func main/,/^}/

* Questions?

* Slides available on GitHub

.link http://danielhess.me/slides

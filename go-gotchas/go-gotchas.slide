Gotchas In Go
Different hangups in go that catch most
06 Dec 2017
Tags:

Daniel Hess
Senior Software Engineer
Ion Channel

http://www.ionchannel.io
dan.hess@ionchannel.io

daniel@danielhess.me
@dan9186

* Who Am I?

- Developed microservices in the cloud
- Practitioner of agile software development
- Always learning more to share more

* Linting

* Linting
For the love of all things holy, DO NOT use an editor without `go fmt` automatically run for you.  Consider turning on all the meta linters you possibly can.
.image img/fancy-gopher.jpg 675 _

* Idioms

* Idioms
- Go is very persnickety about syntax and format compared to other languages
- let Go make the decisions for you
- stick with the community
- try to be as idiomatic as possible, understand first then diverge
- write Go like Go, you don't try to use Perl idioms to write JS, give Go the same respect

* Idioms
- work from your `$GOPATH`

	Go: Use $GOPATH
	Dev: Don't wanna
	Go: Use $GOPATH
	Dev: It's not working
	Go: Use $GOPATH
	Dev: But my projects directory!
	Go: Use $GOPATH

* Errors

* Errors (Which failed?)
.play code/errors/no-context.go /^func main/,/return \&user.*\n}/

* Errors
- Never return naked errors
- Including your own context clues is always a good idea
- Makes it difficult to find where your code fails at 3rd party interactions
- Easily solved with `fmt.Errorf()`

* Errors (Context Clues)
.play code/errors/context.go /^func main/,/return \&user.*\n}/

* Postfix Increments

* Postfix Increments
- increments are statements, not operators
.play code/postfix/postfix.go /^func main/,/^}/

* Defers

* Defers
- executed in last-in-first-out order
.play code/defers/stacking.go /^func main/,/^}/
- are not executed if the main routine exits before they are run
.play code/defers/exit.go /^func main/,/^}/

* Scope

* Scope
- don't over use the `:=` operator
.play code/scope/excessive-assignment.go /^func main/,/^}/

* Scope
- inline assignment and checking can impact your scope unexpectedly
- only has scope inside the if statement
.play code/scope/inline.go /^func main/,/^}/

* Pointers

* Pointers
- ranging over pointers, things often appear normal
.play code/pointers/range-norm.go /^func main/,/^}/

* Pointers
- even with a slice of pointers
.play code/pointers/range-sop.go /^func main/,/^}/

* Pointers
- value var of `range` passes by value
- the pointer of the value object will point at the location of the range variable
.play code/pointers/range-why.go /^func main/,/^}/
- usually goes unnoticed

* Pointers
- usually we do a little more appending building up data
.play code/pointers/sop-broken.go /^func main/,/^}/
- a slice of the same address is made

* Pointers
- leverage the index returned by range instead
.play code/pointers/sop-fix.go /^func main/,/^}/

* Questions?

* Slides available on GitHub

.link https://github.com/dan9186/slides
.link http://danielhess.me/slides
